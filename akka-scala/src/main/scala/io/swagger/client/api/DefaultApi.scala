/**
 * Account  Debit Management
 * This API allows to manage schedule DD facilities on an account Additionally it also allows to request the portability of DD Facilities from one account to another. Features: Consult Recurring Schedules, Include Recurring Schedules, Approve or Change Recurring Schedules, Delete Recurring Schedules, Detail Recurring Schedules, Consult History Recurring Schedules, Consult Titles Declined in Recurring Schedules, Detail Title Declined in Recurring Schedules.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nombre.apellidos@gruposantander.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.Errors
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DefaultApi {

  /**
   * Remove a schedule DD Facility
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   * @param scheduleDirectDebitId 
   */
  def accountIdScheduleDirectDebitScheduleDirectDebitIdDelete(xSantanderClientId: String, authorization: String, accountId: String, scheduleDirectDebitId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://localhost/accounts", "/{account_id}/schedule_direct_debit/{schedule_direct_debit_id}", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("schedule_direct_debit_id", scheduleDirectDebitId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Get schedule DD Facility details
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   * @param scheduleDirectDebitId 
   */
  def accountIdScheduleDirectDebitScheduleDirectDebitIdGet(xSantanderClientId: String, authorization: String, accountId: String, scheduleDirectDebitId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost/accounts", "/{account_id}/schedule_direct_debit/{schedule_direct_debit_id}", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("schedule_direct_debit_id", scheduleDirectDebitId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Modify schedule DD Facility (effective date)
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   * @param scheduleDirectDebitId 
   */
  def accountIdScheduleDirectDebitScheduleDirectDebitIdPatch(xSantanderClientId: String, authorization: String, accountId: String, scheduleDirectDebitId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PATCH, "https://localhost/accounts", "/{account_id}/schedule_direct_debit/{schedule_direct_debit_id}", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("schedule_direct_debit_id", scheduleDirectDebitId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Get title from a schedule DD Facility details, allow filtering by title status and date period
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   * @param scheduleDirectDebitId 
   */
  def accountIdScheduleDirectDebitScheduleDirectDebitIdTitlesGet(xSantanderClientId: String, authorization: String, accountId: String, scheduleDirectDebitId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost/accounts", "/{account_id}/schedule_direct_debit/{schedule_direct_debit_id} /titles", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("schedule_direct_debit_id", scheduleDirectDebitId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Get detail  title from schedule Direct debit
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   * @param scheduleDirectDebitId 
   * @param titleId 
   */
  def accountIdScheduleDirectDebitScheduleDirectDebitIdTitlesTitleIdGet(xSantanderClientId: String, authorization: String, accountId: String, scheduleDirectDebitId: String, titleId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost/accounts", "/{account_id}/schedule_direct_debit/{schedule_direct_debit_id} /titles/{title_id}", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("schedule_direct_debit_id", scheduleDirectDebitId)
      .withPathParam("title_id", titleId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Refuse a  title from schedule Direct debit
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 415 : Errors (Unsupported media type)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   * @param scheduleDirectDebitId 
   * @param titleId 
   */
  def accountIdScheduleDirectDebitScheduleDirectDebitIdTitlesTitleIdRefuseTittlePost(xSantanderClientId: String, authorization: String, accountId: String, scheduleDirectDebitId: String, titleId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost/accounts", "/{account_id}/schedule_direct_debit/{schedule_direct_debit_id} /titles/{title_id}/refuse_tittle", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("schedule_direct_debit_id", scheduleDirectDebitId)
      .withPathParam("title_id", titleId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](415)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Get list of schedule DD facilities under an account. Allows filtering per payee and status (accepted  or pendig)
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   */
  def accountIdScheduleDirectDebitsGet(xSantanderClientId: String, authorization: String, accountId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost/accounts", "/{account_id}/schedule_direct_debits", "application/json")
      .withPathParam("account_id", accountId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Register a new schedule DD facility from an offer accepted
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 415 : Errors (Unsupported media type)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   * @param scheduleDirectDebitId 
   */
  def accountIdScheduleDirectDebitsScheduleDirectDebitIdApproveScheduleDdPost(xSantanderClientId: String, authorization: String, accountId: String, scheduleDirectDebitId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost/accounts", "/{account_id}/schedule_direct_debits/{schedule_direct_debit_id}/approve_schedule_dd", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("schedule_direct_debit_id", scheduleDirectDebitId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](415)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
      

}

