/**
 * Account  Process
 * Account Process
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nombre.apellidos@gruposantander.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.Error
import io.swagger.client.model.Errors
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DefaultApi {

  /**
   * Read account information: Basic Data, Identifiers. Current Balance Last Statements and last Transactions (last two months)
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   */
  def accountIdGet(xSantanderClientId: String, authorization: String, accountId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost/accounts", "/{account_id}", "application/json")
      .withPathParam("account_id", accountId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   *  Retrieve  list of limits of one account
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   */
  def accountIdLimitsGet(xSantanderClientId: String, authorization: String, accountId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost/accounts", "/{account_id}/limits", "application/json")
      .withPathParam("account_id", accountId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Cancel one limit
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   * @param limitId 
   */
  def accountIdLimitsLimitIdDelete(xSantanderClientId: String, authorization: String, accountId: String, limitId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://localhost/accounts", "/{account_id}/limits/{limit_id}", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("limit_id", limitId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   *  Retrieve  details of one account limit
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   * @param limitId 
   */
  def accountIdLimitsLimitIdGet(xSantanderClientId: String, authorization: String, accountId: String, limitId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost/accounts", "/{account_id}/limits/{limit_id}", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("limit_id", limitId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Update one limit details
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   * @param limitId 
   */
  def accountIdLimitsLimitIdPatch(xSantanderClientId: String, authorization: String, accountId: String, limitId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PATCH, "https://localhost/accounts", "/{account_id}/limits/{limit_id}", "application/json")
      .withPathParam("account_id", accountId)
      .withPathParam("limit_id", limitId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Create limit in one account
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Error (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 415 : Errors (Unsupported media type)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   */
  def accountIdLimitsPost(xSantanderClientId: String, authorization: String, accountId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost/accounts", "/{account_id}/limits", "application/json")
      .withPathParam("account_id", accountId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Error](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](415)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Retrieve all prices applicable to an account by period
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   */
  def accountIdPricesGet(xSantanderClientId: String, authorization: String, accountId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost/accounts", "/{account_id}/prices", "application/json")
      .withPathParam("account_id", accountId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Account request cancellation
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 415 : Errors (Unsupported media type)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   */
  def accountIdResquestCancellationPost(xSantanderClientId: String, authorization: String, accountId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost/accounts", "/{account_id}/resquest_cancellation", "application/json")
      .withPathParam("account_id", accountId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](415)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Restore account previously cancelled
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 415 : Errors (Unsupported media type)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   */
  def accountIdRestoreAccountPost(xSantanderClientId: String, authorization: String, accountId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost/accounts", "/{account_id}/restore_account", "application/json")
      .withPathParam("account_id", accountId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](415)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Retrieve the activities carried out on an account (transactions, updates, etc.) from the logs of all channels
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 415 : Errors (Unsupported media type)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   */
  def accountIdRetreieveLogsActivityPost(xSantanderClientId: String, authorization: String, accountId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost/accounts", "/{account_id}/retreieve_logs_activity", "application/json")
      .withPathParam("account_id", accountId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](415)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Close account validation
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 415 : Errors (Unsupported media type)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   */
  def accountIdSimulateCancellationPost(xSantanderClientId: String, authorization: String, accountId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost/accounts", "/{account_id}/simulate_cancellation", "application/json")
      .withPathParam("account_id", accountId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](415)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Validate customer�s account status, if the account can be related to a specific product and funds enough
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 415 : Errors (Unsupported media type)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   * @param accountId 
   */
  def accountIdValidateInformationPost(xSantanderClientId: String, authorization: String, accountId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost/accounts", "/{account_id}/validate_information", "application/json")
      .withPathParam("account_id", accountId)
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](415)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Rretrieve account list
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   */
  def rootGet(xSantanderClientId: String, authorization: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost/accounts", "/", "application/json")
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
        /**
   * Create account Capture and record basic data Regulatory compliance (AML, Black List, Fraud, Risk) Iidentifier assignment
   * 
   * Expected answers:
   *   code 400 : Errors (Bad Request)
   *   code 401 : Errors (Unauthorized)
   *   code 403 : Errors (Forbidden)
   *   code 404 : Errors (Not Found)
   *   code 415 : Errors (Unsupported media type)
   *   code 500 : Errors (Internal Server Error)
   *   code 503 : Errors (Service Unavailable)
   *   code 504 : Errors (Gateway Tiemout)
   * 
   * @param xSantanderClientId Client ID header
   * @param authorization Authorization security header
   */
  def rootPost(xSantanderClientId: String, authorization: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost/accounts", "/", "application/json")
      .withHeaderParam("X-Santander-Client-Id", xSantanderClientId)
      .withHeaderParam("Authorization", authorization)
      .withErrorResponse[Errors](400)
      .withErrorResponse[Errors](401)
      .withErrorResponse[Errors](403)
      .withErrorResponse[Errors](404)
      .withErrorResponse[Errors](415)
      .withErrorResponse[Errors](500)
      .withErrorResponse[Errors](503)
      .withErrorResponse[Errors](504)
      

}

